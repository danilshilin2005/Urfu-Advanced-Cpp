#include "figures.hpp"
#include <cmath>

static constexpr double PI = 3.14;
Rect::Rect(double a, double b) : width(a), height(b) {}

FigureType Rect::Type() const {
    return FigureType::RECTANGLE;
}

double Rect::Perimeter() const {
    return 2 * (width + height);
}

double Rect::Area() const {
    return width * height;
}

Triangle::Triangle(double side_a, double side_b, double side_c) 
 : a(side_a), b(side_b), c(side_c) {}

FigureType Triangle::Type() const {
    return FigureType::TRIANGLE;
}

double Triangle::Perimeter() const {
    return a + b + c;
}

double Triangle::Area() const {
    double s = Perimeter() / 2;
    return std::sqrt(s * (s - a) * (s - b) * (s - c));
}

Circle::Circle(double r) : radius(r) {}

FigureType Circle::Type() const {
    return FigureType::CIRCLE;
}

double Circle::Perimeter() const {
    return 2 * PI * radius;
}

double Circle::Area() const {
    return PI * radius * radius;
}


std::unique_ptr<Figure> make_figure(FigureType type, double a, double b, double c) {
    if (a < 0 || b < 0 || c < 0) {
        throw LessThanZeroParam("");
    }

    switch (type) {
        case FigureType::RECTANGLE:
            return std::make_unique<Rect>(a, b);

        case FigureType::TRIANGLE:
            if (a + b <= c || b + c <= a || a + c <= b) {
                throw WrongTriangle("");
            }
            return std::make_unique<Triangle>(a, b, c);

        case FigureType::CIRCLE:
            return std::make_unique<Circle>(a);

        default:
            return nullptr;
    }
}

#include <memory>
#include <stdexcept>

// Make PI accessible to tests and other code
constexpr double PI = 3.14;

enum class FigureType
{
 TRIANGLE,
@@ -12,30 +15,59 @@ enum class FigureType

class Figure {
public:
    virtual ~Figure() = default; // Add virtual destructor for proper cleanup
    virtual FigureType Type() const = 0;
    virtual double Perimeter() const = 0;
    virtual double Area() const = 0;
};

class Rect : public Figure
{
private:
    double width;
    double height;

public:
    Rect(double a, double b);
    FigureType Type() const override;
    double Perimeter() const override;
    double Area() const override;
};

class Triangle : public Figure
{
private:
    double a, b, c;

public:
    Triangle(double side_a, double side_b, double side_c);
    FigureType Type() const override;
    double Perimeter() const override;
    double Area() const override;
};

class Circle : public Figure
{
private:
    double radius;

public:
    Circle(double r);
    FigureType Type() const override;
    double Perimeter() const override;
    double Area() const override;
};

std::unique_ptr<Figure> make_figure(FigureType type, double a, double b = 0, double c = 0);

class WrongTriangle : public std::invalid_argument
{
public:
    using std::invalid_argument::invalid_argument;
};

class LessThanZeroParam : public std::invalid_argument
{
public:
    using std::invalid_argument::invalid_argument;
};
